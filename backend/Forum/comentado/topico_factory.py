from abc import ABC, abstractmethod
from django.utils import timezone
from ..models import Forum


class TopicoCreator(ABC):
    """
    Classe abstrata para cria√ß√£o de diferentes tipos de t√≥picos do f√≥rum
    """
    
    @abstractmethod
    def create_topico(self, user, titulo, conteudo, **kwargs):
        """
        M√©todo abstrato para criar um t√≥pico
        
        Args:
            user: Usu√°rio que est√° criando o t√≥pico
            titulo: T√≠tulo do t√≥pico
            conteudo: Conte√∫do do t√≥pico
            **kwargs: Par√¢metros espec√≠ficos para cada tipo de t√≥pico
        """
        pass
    
    def validar_conteudo(self, titulo, conteudo):
        """M√©todo comum para validar t√≠tulo e conte√∫do"""
        if not titulo or len(titulo.strip()) < 5:
            raise ValueError("T√≠tulo deve ter pelo menos 5 caracteres")
        
        if not conteudo or len(conteudo.strip()) < 10:
            raise ValueError("Conte√∫do deve ter pelo menos 10 caracteres")
        
        return True
    
    def formatar_titulo(self, titulo, prefixo):
        """M√©todo auxiliar para formatar t√≠tulo com prefixo"""
        titulo_limpo = titulo.strip()
        if not titulo_limpo.startswith(f"[{prefixo}]"):
            return f"[{prefixo}] {titulo_limpo}"
        return titulo_limpo


class TopicoVagaCreator(TopicoCreator):
    """
    Factory para criar t√≥picos de vagas de est√°gio/emprego
    """
    
    def create_topico(self, user, titulo, conteudo, salario=None, requisitos=None, 
                     empresa=None, tipo_vaga="Est√°gio", **kwargs):
        self.validar_conteudo(titulo, conteudo)
        
        # Formatar t√≠tulo com prefixo de vaga
        titulo_formatado = self.formatar_titulo(titulo, f"VAGA - {tipo_vaga.upper()}")
        
        # Enriquecer o conte√∫do com informa√ß√µes espec√≠ficas da vaga
        conteudo_enriquecido = conteudo
        
        if empresa:
            conteudo_enriquecido += f"\n\nüè¢ **Empresa:** {empresa}"
        
        if salario:
            conteudo_enriquecido += f"\nüí∞ **Sal√°rio:** {salario}"
        
        if requisitos:
            conteudo_enriquecido += f"\nüìã **Requisitos:** {requisitos}"
        
        conteudo_enriquecido += f"\n\nüè∑Ô∏è **Tipo de Vaga:** {tipo_vaga}"
        conteudo_enriquecido += f"\nüìÖ **Publicado em:** {timezone.now().strftime('%d/%m/%Y √†s %H:%M')}"
        
        topico = Forum.objects.create(
            user=user,
            titulo=titulo_formatado,
            conteudo=conteudo_enriquecido,
            visualizacoes=0,
            is_active=True
        )
        
        return topico


class TopicoDuvidaCreator(TopicoCreator):
    """
    Factory para criar t√≥picos de d√∫vidas sobre est√°gios
    """
    
    def create_topico(self, user, titulo, conteudo, categoria="Geral", 
                     urgencia="Normal", tags=None, **kwargs):
        self.validar_conteudo(titulo, conteudo)
        
        # Formatar t√≠tulo com prefixo de d√∫vida
        titulo_formatado = self.formatar_titulo(titulo, f"D√öVIDA - {categoria.upper()}")
        
        # Adicionar informa√ß√µes espec√≠ficas da d√∫vida
        conteudo_enriquecido = conteudo
        conteudo_enriquecido += f"\n\nüìÇ **Categoria:** {categoria}"
        conteudo_enriquecido += f"\n‚ö° **Urg√™ncia:** {urgencia}"
        
        if tags:
            tags_str = ", ".join(tags) if isinstance(tags, list) else tags
            conteudo_enriquecido += f"\nüè∑Ô∏è **Tags:** {tags_str}"
        
        # Adicionar call-to-action para respostas
        if urgencia.lower() == "alta":
            conteudo_enriquecido += f"\n\nüö® **URGENTE:** Preciso de ajuda rapidamente!"
        
        conteudo_enriquecido += f"\n\nüìÖ **Pergunta feita em:** {timezone.now().strftime('%d/%m/%Y √†s %H:%M')}"
        conteudo_enriquecido += f"\nüë• **Aguardando respostas da comunidade...**"
        
        topico = Forum.objects.create(
            user=user,
            titulo=titulo_formatado,
            conteudo=conteudo_enriquecido,
            visualizacoes=0,
            is_active=True
        )
        
        return topico


class TopicoExperienciaCreator(TopicoCreator):
    """
    Factory para criar t√≥picos de compartilhamento de experi√™ncias
    """
    
    def create_topico(self, user, titulo, conteudo, empresa=None, periodo=None, 
                     area=None, nota_experiencia=None, **kwargs):
        self.validar_conteudo(titulo, conteudo)
        
        # Formatar t√≠tulo com prefixo de experi√™ncia
        titulo_formatado = self.formatar_titulo(titulo, "EXPERI√äNCIA")
        
        # Enriquecer conte√∫do com detalhes da experi√™ncia
        conteudo_enriquecido = conteudo
        
        if empresa:
            conteudo_enriquecido += f"\n\nüè¢ **Empresa:** {empresa}"
        
        if periodo:
            conteudo_enriquecido += f"\nüìÖ **Per√≠odo:** {periodo}"
        
        if area:
            conteudo_enriquecido += f"\nüíº **√Årea:** {area}"
        
        if nota_experiencia:
            estrelas = "‚≠ê" * int(nota_experiencia)
            conteudo_enriquecido += f"\n‚≠ê **Avalia√ß√£o:** {estrelas} ({nota_experiencia}/5)"
        
        conteudo_enriquecido += f"\n\nüìñ **Compartilhado em:** {timezone.now().strftime('%d/%m/%Y √†s %H:%M')}"
        conteudo_enriquecido += f"\nüí¨ **Compartilhe sua experi√™ncia tamb√©m!**"
        
        topico = Forum.objects.create(
            user=user,
            titulo=titulo_formatado,
            conteudo=conteudo_enriquecido,
            visualizacoes=0,
            is_active=True
        )
        
        return topico


class TopicoDicaCreator(TopicoCreator):
    """
    Factory para criar t√≥picos de dicas sobre est√°gios e carreira
    """
    
    def create_topico(self, user, titulo, conteudo, categoria_dica="Carreira", 
                     nivel="Iniciante", aplicabilidade="Geral", **kwargs):
        self.validar_conteudo(titulo, conteudo)
        
        # Formatar t√≠tulo com prefixo de dica
        titulo_formatado = self.formatar_titulo(titulo, f"DICA - {categoria_dica.upper()}")
        
        # Enriquecer conte√∫do com informa√ß√µes da dica
        conteudo_enriquecido = conteudo
        conteudo_enriquecido += f"\n\nüí° **Categoria:** {categoria_dica}"
        conteudo_enriquecido += f"\nüéØ **N√≠vel:** {nivel}"
        conteudo_enriquecido += f"\nüåê **Aplicabilidade:** {aplicabilidade}"
        
        # Adicionar call-to-action baseado no n√≠vel
        if nivel.lower() == "iniciante":
            conteudo_enriquecido += f"\n\nüå± **Perfeito para quem est√° come√ßando!**"
        elif nivel.lower() == "avan√ßado":
            conteudo_enriquecido += f"\n\nüöÄ **Para quem j√° tem experi√™ncia!**"
        
        conteudo_enriquecido += f"\n\nüìÖ **Dica compartilhada em:** {timezone.now().strftime('%d/%m/%Y √†s %H:%M')}"
        conteudo_enriquecido += f"\nüëç **Ajudou? Deixe um coment√°rio!**"
        
        topico = Forum.objects.create(
            user=user,
            titulo=titulo_formatado,
            conteudo=conteudo_enriquecido,
            visualizacoes=0,
            is_active=True
        )
        
        return topico


class TopicoDiscussaoCreator(TopicoCreator):
    """
    Factory para criar t√≥picos de discuss√£o geral
    """
    
    def create_topico(self, user, titulo, conteudo, tema="Geral", 
                     tipo_discussao="Aberta", **kwargs):
        self.validar_conteudo(titulo, conteudo)
        
        # Formatar t√≠tulo com prefixo de discuss√£o
        titulo_formatado = self.formatar_titulo(titulo, f"DISCUSS√ÉO - {tema.upper()}")
        
        # Enriquecer conte√∫do
        conteudo_enriquecido = conteudo
        conteudo_enriquecido += f"\n\nüó£Ô∏è **Tema:** {tema}"
        conteudo_enriquecido += f"\nüí≠ **Tipo:** {tipo_discussao}"
        
        # Adicionar call-to-action para participa√ß√£o
        conteudo_enriquecido += f"\n\nüìÖ **Discuss√£o iniciada em:** {timezone.now().strftime('%d/%m/%Y √†s %H:%M')}"
        conteudo_enriquecido += f"\nüí¨ **Participe! Queremos ouvir sua opini√£o!**"
        
        topico = Forum.objects.create(
            user=user,
            titulo=titulo_formatado,
            conteudo=conteudo_enriquecido,
            visualizacoes=0,
            is_active=True
        )
        
        return topico


class TopicoFactory:
    """
    Factory principal que gerencia os diferentes tipos de criadores de t√≥picos
    """
    
    _creators = {
        'vaga': TopicoVagaCreator(),
        'duvida': TopicoDuvidaCreator(),
        'experiencia': TopicoExperienciaCreator(),
        'dica': TopicoDicaCreator(),
        'discussao': TopicoDiscussaoCreator(),
    }
    
    @classmethod
    def get_creator(cls, tipo_topico):
        """
        Retorna o creator apropriado baseado no tipo de t√≥pico
        
        Args:
            tipo_topico: Tipo do t√≥pico ('vaga', 'duvida', 'experiencia', 'dica', 'discussao')
        
        Returns:
            TopicoCreator: O creator apropriado
        """
        creator = cls._creators.get(tipo_topico.lower())
        if not creator:
            raise ValueError(f"Tipo de t√≥pico '{tipo_topico}' n√£o suportado. "
                           f"Tipos dispon√≠veis: {list(cls._creators.keys())}")
        return creator
    
    @classmethod
    def create_topico(cls, tipo_topico, user, titulo, conteudo, **kwargs):
        """
        M√©todo de conveni√™ncia para criar um t√≥pico
        
        Args:
            tipo_topico: Tipo do t√≥pico
            user: Usu√°rio que est√° criando o t√≥pico
            titulo: T√≠tulo do t√≥pico
            conteudo: Conte√∫do do t√≥pico
            **kwargs: Par√¢metros espec√≠ficos para cada tipo
        
        Returns:
            Forum: O t√≥pico criado
        """
        creator = cls.get_creator(tipo_topico)
        return creator.create_topico(user, titulo, conteudo, **kwargs)
    
    @classmethod
    def get_tipos_disponiveis(cls):
        """
        Retorna informa√ß√µes sobre os tipos de t√≥picos dispon√≠veis
        """
        return {
            'vaga': {
                'nome': 'Vaga de Est√°gio/Emprego',
                'descricao': 'Para publicar oportunidades de est√°gio ou emprego',
                'campos_extras': ['salario', 'requisitos', 'empresa', 'tipo_vaga'],
                'exemplo': 'Vaga para desenvolvedor Python j√∫nior'
            },
            'duvida': {
                'nome': 'D√∫vida sobre Est√°gios',
                'descricao': 'Para fazer perguntas sobre est√°gios e carreira',
                'campos_extras': ['categoria', 'urgencia', 'tags'],
                'exemplo': 'Como me preparar para entrevista t√©cnica?'
            },
            'experiencia': {
                'nome': 'Compartilhar Experi√™ncia',
                'descricao': 'Para compartilhar experi√™ncias de est√°gio',
                'campos_extras': ['empresa', 'periodo', 'area', 'nota_experiencia'],
                'exemplo': 'Minha experi√™ncia como estagi√°rio na empresa X'
            },
            'dica': {
                'nome': 'Dica de Carreira',
                'descricao': 'Para compartilhar dicas √∫teis sobre carreira',
                'campos_extras': ['categoria_dica', 'nivel', 'aplicabilidade'],
                'exemplo': 'Como criar um LinkedIn profissional'
            },
            'discussao': {
                'nome': 'Discuss√£o Geral',
                'descricao': 'Para iniciar discuss√µes sobre temas diversos',
                'campos_extras': ['tema', 'tipo_discussao'],
                'exemplo': 'O que voc√™s acham do home office para estagi√°rios?'
            }
        }
